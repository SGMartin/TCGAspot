#!/usr/bin/env python3
"""
mRNA expression filtering module: This script takes single point mutation data
from the TCGA generated by RNASeq and filters it. At this moment it performs
a quick analysis whose aim is to catch the top overexpressed genes of a patient
compared to the rest of the cohort. It will be used to check cnv gains 
downstream.

An exhaustive analysis will be added later.
"""

import sys

import pandas as pd
import numpy  as np
from scipy import stats
from scipy.stats import zscore

#TODO: Implement an exhaustive filter to tackle multiple transcripts assigned
# to the same gene.
#TODO: Multisampling.
#TODO: Prepare the filter for future annotations.file being published

def main(raw_expression_data: str, rna_seq_dict:str, where_to_save:str):

	# Load expr data
	raw_expression_data = pd.read_csv(raw_expression_data, sep='\t')

	# Calculate zscore and melt data for easier manipulation
	# melted_data   = melt_zscore(raw_expression_data)
	melted_data   = calculate_zscore(raw_expression_data)
	filtered_data = get_upper_standard_deviation_expression(melted_data)
	
	# Annotate transcripts using the table and save it
	annotated_data = filter_known_transcripts(filtered_data, rna_seq_dict)
	
	del raw_expression_data
	del melted_data
	del filtered_data

	annotated_data.to_csv(where_to_save, sep=',', index=False)


def get_upper_standard_deviation_expression(melted_data: pd.DataFrame) -> pd.DataFrame:
	'''
	This method takes melted expression data and filters it according to it's
	zscore
	'''
	melted_data['over_threshold'] = melted_data['expression'] > 2

	return melted_data[melted_data['over_threshold']]

def calculate_zscore(raw_data: pd.DataFrame) -> pd.DataFrame:
	'''
	This method takes input raw expresson data and calculates a zscore for
	each transcript across all patients. Then it melts the data and returns
	it.
	'''
	print('calculating Z-score')

	melted_data = raw_data.melt(id_vars=['Ensembl_ID'],
								var_name='aliquot',
								value_name='expression')
	


def filter_known_transcripts(melted_data: pd.DataFrame, rna_dict: str):
	'''
	Attempt to match Ensembl_ID transcripts to known genes. Returns a dataframe
	with matched pairs.
	'''
	print('filtering known transcripts')
	rna_translation = pd.read_csv(rna_dict, sep=',', index_col='Ensembl_ID')
	rna_translation = rna_translation.to_dict()

	# get rid of ensembl version number and attempt the map
	melted_data['Ensembl_ID'] = melted_data['Ensembl_ID'].str.split('.').str[0].str.strip()
	melted_data['Hugo_Symbol'] = melted_data['Ensembl_ID'].map(rna_translation)
	print(melted_data)
	
	# get transcripts which did not match
	melted_data.dropna(axis='index', how='any', inplace=True)
	print(melted_data)
	
	del rna_translation
	return melted_data


if __name__ == "__main__":
	main(sys.argv[1], sys.argv[2], sys.argv[3])	